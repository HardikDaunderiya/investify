// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: owner.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOwner = `-- name: CreateOwner :one
INSERT INTO
    bk_owner (
        owner_name,
        owner_user_id,
        owner_address_id
    )
VALUES
    ($1, $2, $3) RETURNING owner_id, owner_name, owner_user_id, owner_address_id, created_at, updated_at, deleted_at
`

type CreateOwnerParams struct {
	OwnerName      pgtype.Text `json:"owner_name"`
	OwnerUserID    int64       `json:"owner_user_id"`
	OwnerAddressID int64       `json:"owner_address_id"`
}

func (q *Queries) CreateOwner(ctx context.Context, arg CreateOwnerParams) (BkOwner, error) {
	row := q.db.QueryRow(ctx, createOwner, arg.OwnerName, arg.OwnerUserID, arg.OwnerAddressID)
	var i BkOwner
	err := row.Scan(
		&i.OwnerID,
		&i.OwnerName,
		&i.OwnerUserID,
		&i.OwnerAddressID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOwnerByUserId = `-- name: GetOwnerByUserId :one
SELECT
    owner_id, owner_name, owner_user_id, owner_address_id, created_at, updated_at, deleted_at FROM bk_owner where owner_user_id = $1 LIMIT 1
`

func (q *Queries) GetOwnerByUserId(ctx context.Context, ownerUserID int64) (BkOwner, error) {
	row := q.db.QueryRow(ctx, getOwnerByUserId, ownerUserID)
	var i BkOwner
	err := row.Scan(
		&i.OwnerID,
		&i.OwnerName,
		&i.OwnerUserID,
		&i.OwnerAddressID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
